var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = JCheck","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Quickcheck\nQuickcheck(::AbstractString)","category":"page"},{"location":"reference/#JCheck.Quickcheck","page":"Reference","title":"JCheck.Quickcheck","text":"Quickcheck\n\nContain a set of property to check through the generation of random input.\n\nFields\n\ndescription::AbstractString: description for the instance.\nrng::AbstractRNG: PRNG used to generate inputs.\npredicates::PredsAssoc: predicates to check.\nvariables::ArgsDict: Arguments used by the predicates.\nn::Int: Number of random inputs to generate.\nserialize_fails::Bool: If true, serialize failing inputs to a JLSO file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#JCheck.Quickcheck-Tuple{AbstractString}","page":"Reference","title":"JCheck.Quickcheck","text":"Quickcheck(desc; rng=GLOBAL_RNG, n=100, serialize_fails=true)\n\nConstructor for type Quickcheck.\n\nArguments\n\ndesc::AbstractString: description for the instance.\nrng::AbstractRNG: PRNG used to generate inputs.\nn::Int: Number of random inputs to generate.\nserialize_fails::Bool: If true, serialize failing inputs to a JLSO file.\n\nExamples\n\njulia> qc = Quickcheck(\"A Test\")\nA Test: 0 predicate and 0 free variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Reference","title":"Reference","text":"@quickcheck(::Any)","category":"page"},{"location":"reference/#JCheck.@quickcheck-Tuple{Any}","page":"Reference","title":"JCheck.@quickcheck","text":"@quickcheck qc\n\nCheck the properties specified in object qc of type Quickcheck.\n\n\n\n\n\n","category":"macro"},{"location":"#JCheck.jl-Documentation","page":"Home","title":"JCheck.jl Documentation","text":"","category":"section"},{"location":"#What-is-JCheck.jl?","page":"Home","title":"What is JCheck.jl?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JCheck is a test framework for the Julia programming language. It aims imitating the one and only Quickcheck. The user specifies a set of properties in the form of predicates. JCheck then tries to falsifies these predicates. Since it is in general impossible to evaluate a predicate for every possible input, JCheck (as does QuickCheck) employs a Monte Carlo approach: it samples a set of inputs at random and pass them as arguments to the predicates. In order to make analysis of problematic cases more convenient, those can be serialized in a JLSO file for further experimentation.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Reuse inputs to cut into the time dedicated to cases generation.\nSerialization of problematic cases for convenient analysis.\nIntegration with Julia's testing framework.\nAllow specification of \"special cases\" i.e. non-random inputs that are always checked.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Predicate-container","page":"Home","title":"Predicate container","text":"","category":"section"},{"location":"#Adding-predicates","page":"Home","title":"Adding predicates","text":"","category":"section"},{"location":"#(Quick)checking","page":"Home","title":"(Quick)checking","text":"","category":"section"},{"location":"#Analysing-failing-cases","page":"Home","title":"Analysing failing cases","text":"","category":"section"}]
}
